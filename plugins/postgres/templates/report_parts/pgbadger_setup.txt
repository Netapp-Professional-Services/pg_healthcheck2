=== pgBadger Setup and Analysis Recommendations

pgBadger is a powerful open-source PostgreSQL log analyzer that generates comprehensive HTML reports. It's invaluable for identifying slow queries, frequently executed queries, errors, and other log-based insights that complement `pg_stat_statements`.

.  **Enable Appropriate Logging**: For pgBadger to be effective, PostgreSQL needs to log sufficient information. Key `postgresql.conf` parameters to review/set:
    * `log_destination = 'csvlog'` (or `stderr` if you have a log collector)
    * `logging_collector = on` (if using `csvlog` or `stderr` to files)
    * `log_directory = 'pg_log'` (or your preferred log directory)
    * `log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'`
    * `log_min_duration_statement = 100ms` (or a value that captures your slow queries; set to `0` to log all statements, but be cautious of log volume)
    * `log_connections = on`
    * `log_disconnections = on`
    * `log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '` (essential for pgBadger to parse context)
    * `log_lock_waits = on`
    * `log_autovacuum_min_duration = 0` (to log all autovacuum activity)
.  **Restart PostgreSQL**: A restart is required for changes to `log_destination`, `logging_collector`, `log_directory`, `log_filename`. A reload is sufficient for others.
.  **Collect Logs**: Ensure your log files are being collected and rotated appropriately.
.  **Run pgBadger**:
    * **Installation**: Install pgBadger (e.g., `sudo apt install pgbadger` on Debian/Ubuntu, or download from official site).
    * **Execution**: Run pgBadger against your PostgreSQL log files:
        ```bash
        pgbadger -f syslog -o /path/to/report/output.html /var/log/postgresql/postgresql-*.log
        # Or if using csvlog:
        pgbadger -f csv -o /path/to/report/output.html /var/lib/postgresql/15/main/log/*.csv
        ```
        Adjust paths and format (`-f`) as per your setup.
.  **Analyze Reports**: Review the generated HTML reports for:
    * Top slow queries
    * Queries by type (SELECT, INSERT, UPDATE, DELETE)
    * Connections and disconnections
    * Error distribution
    * Checkpoints and temporary file usage

[TIP]
====
pgBadger is an indispensable tool for deep log analysis, providing insights not readily available from `pg_stat_statements` alone. Integrate it into your regular monitoring and troubleshooting routine.
====
