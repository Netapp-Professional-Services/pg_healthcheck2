-- =================================================================
-- Schema for the Health Check Trend Analysis Platform
-- =================================================================

-- Create the 'companies' table to support multi-tenancy
CREATE TABLE IF NOT EXISTS companies (
    id SERIAL PRIMARY KEY,
    company_name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create the main 'health_check_runs' table
CREATE TABLE IF NOT EXISTS health_check_runs (
    id SERIAL PRIMARY KEY,
    company_id INT NOT NULL REFERENCES companies(id),
    run_timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    db_technology TEXT NOT NULL,
    -- Encrypted columns for sensitive data
    target_host BYTEA NOT NULL,
    target_port BYTEA NOT NULL,
    target_db_name BYTEA NOT NULL,
    findings BYTEA NOT NULL
);

-- Create a composite index for efficient querying of runs
CREATE INDEX IF NOT EXISTS idx_health_check_runs_metadata 
ON health_check_runs (company_id, run_timestamp DESC);

-- Optional: Create a default company for single-tenant use cases
INSERT INTO companies (id, company_name) 
VALUES (1, 'Default Company') 
ON CONFLICT (id) DO NOTHING;

-- =================================================================
-- Grant necessary privileges to the application's runtime user
-- =================================================================
-- Replace 'app_user' with the actual user configured in trends.yaml
GRANT CONNECT ON DATABASE postgres TO app_user;
GRANT USAGE ON SCHEMA public TO app_user;
GRANT INSERT ON health_check_runs TO app_user;
GRANT SELECT, INSERT ON companies TO app_user;
GRANT USAGE, SELECT ON SEQUENCE health_check_runs_id_seq TO app_user;
GRANT USAGE, SELECT ON SEQUENCE companies_id_seq TO app_user;

-- Create the 'users' table for web application authentication
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    username TEXT NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    company_id INT NOT NULL REFERENCES companies(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Grant privileges to the application's runtime user
GRANT SELECT, INSERT, UPDATE, DELETE ON users TO app_user;
GRANT USAGE, SELECT ON SEQUENCE users_id_seq TO app_user;


-- =================================================================
-- Function for Seamless Company ID Management
-- =================================================================

CREATE OR REPLACE FUNCTION get_or_create_company(p_company_name TEXT)
RETURNS INT AS $$
DECLARE
    v_company_id INT;
BEGIN
    -- First, try to find the existing company ID
    SELECT id INTO v_company_id
    FROM companies
    WHERE company_name = p_company_name;

    -- If no ID was found, the company does not exist
    IF v_company_id IS NULL THEN
        -- Insert the new company and return its new ID
        INSERT INTO companies (company_name)
        VALUES (p_company_name)
        RETURNING id INTO v_company_id;
    END IF;

    -- Return either the existing or the new ID
    RETURN v_company_id;
END;
$$ LANGUAGE plpgsql;
