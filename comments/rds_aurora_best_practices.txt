=== RDS and Aurora

Optimizing PostgreSQL on AWS RDS and Aurora requires adherence to specific cloud-native best practices that leverage the managed service capabilities.

.  **Instance Sizing**: Choose the appropriate instance type (memory, CPU) and storage (IOPS, throughput) based on your workload's requirements. Don't over-provision, but ensure you have headroom for peak loads.
.  **Parameter Groups**: Understand and configure DB cluster parameter groups and DB parameter groups. These control most PostgreSQL settings. Apply changes carefully, noting which require a reboot.
.  **Monitoring**: Leverage Amazon CloudWatch for core metrics (CPUUtilization, DatabaseConnections, FreeableMemory, WriteIOPS, ReadIOPS, DiskQueueDepth, ReplicaLag). Enable Enhanced Monitoring for OS-level visibility. Use Amazon RDS Performance Insights for deep query analysis.
.  **High Availability**: For RDS, use Multi-AZ deployments. For Aurora, ensure you have sufficient Aurora Replicas distributed across Availability Zones for high availability and read scaling.
.  **Backups & PITR**: Configure automated backups with appropriate retention periods. Understand and test your Point-In-Time Recovery (PITR) capabilities.
.  **Security**: Restrict network access using VPC Security Groups. Use IAM database authentication (for Aurora) or AWS Secrets Manager for credential management. Enforce SSL for all connections.
.  **Connection Management**: Consider Amazon RDS Proxy for efficient connection pooling, especially for serverless applications or those with high connection churn.
.  **Upgrades**: Plan and test major and minor version upgrades carefully. Utilize blue/green deployments or read replica promotions for minimal downtime.
.  **Storage Optimization**: For RDS, choose appropriate storage types (gp2, gp3, io1/io2). For Aurora, storage scales automatically, but monitor `VolumeBytesUsed` and `VolumeReadIOPS`/`VolumeWriteIOPS`.
.  **Logging**: Configure database logging via parameter groups to send logs to CloudWatch Logs. This centralizes logs for analysis and alerting (e.g., for slow queries, errors, deadlocks).
.  **Cost Optimization**: Regularly review resource utilization and scale down instances or storage if over-provisioned. Identify and drop unused indexes or tables.

[TIP]
====
AWS managed services abstract away much of the operational burden, but active monitoring and continuous optimization of database parameters and application queries are still essential for peak performance and cost efficiency.
====
