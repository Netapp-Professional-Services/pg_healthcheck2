Plan: On-Demand AI Analysis and Report Generation

This plan outlines a new feature for the trends_app that allows authorized users to generate, store, and retrieve AI-powered analysis reports directly from the dashboard. It includes a secure, database-driven system for managing AI providers, user-configurable "AI Profiles," and audience-specific prompt templates.
1. AI Configuration Management

    Database Schema Changes:

        Create ai_providers Table: For administrators to manage available AI endpoints.

        Create user_ai_profiles Table: For users to create and save multiple, complete AI configurations.

    New Admin Routes (trends_app/admin.py):

        Create new routes and templates for administrators to perform full CRUD operations on the ai_providers table.

    New User Profile Routes (e.g., trends_app/profile.py):

        Create a new "AI Settings" page where users can perform full CRUD operations on their personal user_ai_profiles.

    New API Endpoints (trends_app/main.py):

        Create /api/user-ai-profiles to fetch a list of the current user's saved AI profiles.

2. Analysis, Prompts, and Report Storage (Database)

    Create analysis_rules Table:

        id (PK), rule_set_name, technology, rules_json (JSONB).

        Migration: A script will be needed to populate this table from your existing analysis_rules.py file.

    Create prompt_templates Table (New):

        id (PK), template_name (e.g., "Executive Summary"), technology, template_content (TEXT).

        Migration: A script will be needed to read your .j2 files and populate this table.

    Create generated_ai_reports Table:

        id (PK), run_id (FK), rule_set_id (FK), template_id (FK to prompt_templates), ai_profile_id (FK), generated_by_user_id (FK), generation_timestamp, report_content (TEXT, encrypted), report_name (TEXT), report_description (TEXT), annotations (TEXT).

3. Decoupled Backend Logic (trends_app/)

    Create trends_app/prompt_generator.py:

        This module's generate_web_prompt function will now accept JSON findings, a rule_set_id, and a template_id.

        Updated Logic: It will fetch both the analysis rules and the selected Jinja2 template from the database. It will perform the severity analysis and then use the Jinja2 library to render the template with the results, creating a highly customized prompt.

    Create trends_app/ai_connector.py:

        This module's get_ai_recommendation function will accept a prompt and a profile_id and handle all communication with the AI API.

4. Main API Endpoints (trends_app/main.py)

    Create /api/generate-ai-report Route:

        Security: Secure with the GenerateReports privilege.

        Parameters: Accept run_id, profile_id, template_id, and an optional rule_set_id.

        Logic:

            Generate a prompt by calling generate_web_prompt.

            Call get_ai_recommendation.

            Encrypt and store the AI's response and metadata in the generated_ai_reports table.

            Return the response as a downloadable Asciidoc file.

    Create /api/analysis-rules and /api/prompt-templates Routes (New):

        These endpoints will provide the lists of available rule sets and templates for the UI dropdowns.

5. Report History and Retrieval

    New "Report History" Page:

        A page where users can view, edit metadata for, and re-download their previously generated reports.

    New API Endpoints:

        /api/generated-reports: To list a user's reports.

        /api/generated-reports/<int:report_id>: A PUT endpoint to update metadata.

        /api/download-report/<int:report_id>: To download a stored report.

6. Frontend UI (trends_app/templates/dashboard.html)

    Add AI Generation Controls:

        Add a "Generate AI Report" button, conditionally rendered based on privilege.

        Add dropdowns to select the desired AI Profile, Analysis Rule Set, and Prompt Template (Report Audience).

        Add links to the "AI Settings" and "Report History" pages.

    Update Button Logic:

        The button will be enabled when one run is selected.

        When clicked, a modal will prompt for a report name/description.

        Upon submission, the JavaScript will gather all selected IDs and metadata and send them to the /api/generate-ai-report endpoint.
