Plan: On-Demand AI Analysis and Report Generation

This plan outlines a new feature for the trends_app that allows authorized users to generate, store, and retrieve AI-powered analysis reports directly from the dashboard. It includes a secure, database-driven system for managing AI providers and user-configurable "AI Profiles."
1. AI Configuration Management

This is the foundation for the new feature, moving all AI settings from trends.yaml into the database.

    Database Schema Changes:

        Create ai_providers Table: For administrators to manage available AI endpoints.

            id (PK), provider_name, api_endpoint, api_model, encrypted_api_key (TEXT, nullable), is_active (boolean), allow_user_keys (boolean).

        Create user_ai_profiles Table: For users to create and save multiple, complete AI configurations.

            id (PK), user_id (FK), profile_name, provider_id (FK), temperature (float), max_output_tokens (integer), encrypted_user_api_key (TEXT, nullable), proxy_username (TEXT, nullable).

    New Admin Routes (trends_app/admin.py):

        Create new routes and templates for administrators to perform full CRUD operations on the ai_providers table.

    New User Profile Routes (e.g., trends_app/profile.py):

        Create a new "AI Settings" page where users can perform full CRUD operations on their personal user_ai_profiles.

    New API Endpoints (trends_app/main.py):

        Create /api/user-ai-profiles to fetch a list of the current user's saved AI profiles.

2. Analysis and Report Storage (Database)

    Create analysis_rules Table:

        id (PK), rule_set_name, technology, rules_json (JSONB).

        Migration: A script will be needed to populate this table from your existing analysis_rules.py file.

    Create generated_ai_reports Table:

        id (PK), run_id (FK), rule_set_id (FK), ai_profile_id (FK), generated_by_user_id (FK), generation_timestamp, report_content (TEXT, encrypted), report_name (TEXT, nullable), report_description (TEXT, nullable), annotations (TEXT, nullable).

3. Decoupled Backend Logic (trends_app/)

    Create trends_app/prompt_generator.py:

        This module will contain a generate_web_prompt function that accepts JSON findings and a rule_set_id, fetches the rules from the database, and generates a high-quality prompt.

    Create trends_app/ai_connector.py:

        This module's get_ai_recommendation function will accept a prompt and a profile_id and handle all communication with the AI API.

4. Main API Endpoints (trends_app/main.py)

    Create /api/generate-ai-report Route:

        Security: Secure with the GenerateReports privilege.

        Parameters: Accept run_id, profile_id, an optional rule_set_id, and the new metadata fields (report_name, report_description).

        Logic:

            Generate a prompt.

            Call get_ai_recommendation.

            Encrypt and store the AI's response and the user-provided metadata in the generated_ai_reports table.

            Return the response as a downloadable Asciidoc file.

5. Report History and Retrieval (New Section)

This section covers the functionality for users to access and manage their previously generated reports.

    New "Report History" Page (trends_app/main.py & templates/):

        Create a new route and HTML template for a "Report History" page.

        This page will display a table of all reports generated by the current user, showing metadata like the report_name, report_description, original run ID, and generation date.

        Editing: The page will include functionality (e.g., a modal popup) for users to edit the name, description, and annotations of their saved reports.

    New API Endpoints (trends_app/main.py):

        /api/generated-reports: A GET endpoint that queries the generated_ai_reports table for reports created by the current user and returns the list of metadata to populate the history page.

        /api/generated-reports/<int:report_id>: A PUT endpoint to update the metadata (report_name, report_description, annotations) for a specific report.

        /api/download-report/<int:report_id>: A GET endpoint that:

            Takes a report_id as input.

            Verifies the current user is authorized to access that report.

            Fetches the encrypted report_content from the database.

            Decrypts the content using pgcrypto.

            Returns the decrypted Asciidoc text as a file download.

6. Frontend UI (trends_app/templates/dashboard.html)

    Add AI Generation Controls:

        Add a "Generate AI Report" button, conditionally rendered based on the GenerateReports privilege.

        Add dropdowns to select the desired AI Profile and Analysis Rule Set.

        Add a link to the new "AI Settings" page and the new "Report History" page.

    Update Button Logic:

        The "Generate AI Report" button will be enabled when one run is selected.

        When clicked, the JavaScript will open a modal prompting the user for a report_name and report_description.

        Upon submission, it will gather the run_id, profile_id, rule_set_id, and the new metadata and send them to the /api/generate-ai-report endpoint.
